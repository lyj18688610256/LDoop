// Context-sensitive pointer analysis with context of 2 object and a
// context-sensitive heap abstraction.

#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"



// For this analysis the context of a method call corresponds to the
// identity of the receiver object and the receiver object of the caller.
// Again, this may trigger creation of a new object.
.comp TwoObjectSensitivePlusHeapConfiguration_TFA : AbstractConfiguration {

  // In this analysis, the real context is a pair of Values and the real
  // heap context a single Value.

  .type Context  = [ value1:Value, value2:Value ]
  .type HContext = [ value:Value ]

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),    //这里的value是Heap
    ?hctx = [?hctxValue],
    ?calleeCtx = [?hctxValue, ?value],
    ?tomethod = ?tomethod.

  StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
    StaticContextRequest(?callerCtx, ?invo),
    ?calleeCtx = ?callerCtx.

  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-  //这里的value是heap
    RecordContextRequest(?ctx, ?value, ?var),      
    ?ctx = [?ctxValue1, ?ctxValue2],
    ?hctx = [?ctxValue2],
    ?ctxValue1 = ?ctxValue1.

  InitContextResponse(?value, ?ctx) :-
    InitContextRequest(?value),
    ?ctx = [?value, ?value].

  InitHContextResponse(?value, ?hctx) :-
    InitHContextRequest(?value),
    ?hctx = [?value].



   .init mFlow = Flow

}

.comp Flow{

    .decl SmallVFlow(?from:Ctx_Var, ?to:Ctx_Var)
    .output SmallVFlow
    .decl SSmallVFlow(?from:Ctx_Var, ?to:Ctx_Var, ?from_Var:Var, ?to_Var:Var) 
    .output SSmallVFlow

    .decl SourceValue(?Ctx_Invocation:Ctx_Var, ?var:Ctx_Var)
    .output SourceValue

    .decl SinkValue(?var:Ctx_Var, ?Ctx_SinkInvocation:Ctx_Var)
    .output SinkValue
    .decl SSinkValue(?var:Ctx_Var, ?Ctx_SinkInvocation:Ctx_Var, ?from:Var, ?to:Var)  
    .output SSinkValue

    .type Ctx_Var = [ctx:Context, var:Var]
    .type List = [
        tail : List,
        head : Ctx_Var
    ]
    .type SList =[
        tail : SList,
        head : Var
    ]

    
    .decl B(x : List)   //Context
    .output B
    .decl MB(x : List, maxLength:number, currentLength:number)   //Context M is medium
    .output MB

    .decl C(x : List)   //Context
    .output C


    .decl SB(x: SList)  //No Context,仅仅是把Context从显示中去掉,但是VFlow本质上还是带Context的
    .output SB
    .decl MSB(x: SList, maxLength:number, currentLength:number)
    .output MSB


    .decl SC(x : SList)  //No Context,仅仅是把Context从显示中去掉,但是VFlow本质上还是带Context的
    .output SC

     
SSinkValue(?from_Ctx_Var, ?to_Ctx_Var, ?var, ?invocation),
SinkValue(?from_Ctx_Var, ?to_Ctx_Var):-
    LeakingSinkVariable(_, ?invocation, ?ctx, ?var),
    ?from_Ctx_Var = [?ctx, ?var],
    ?to_Ctx_Var = [?ctx, ?invocation].

SourceValue(?from_Ctx_Var, ?to_Ctx_Var):-
    CallTaintingMethod(_, ?ctx, ?invo),
    TypeForReturnValue(_, ?to, ?invo),
    ?from_Ctx_Var = [?ctx, ?invo],
    ?to_Ctx_Var = [?ctx, ?to].

SSmallVFlow(?from_Ctx_Var, ?to_Ctx_Var, ?from, ?to),
SmallVFlow(?from_Ctx_Var, ?to_Ctx_Var):-
    mainAnalysis.LyjSmallVFlow(?from_Ctx, ?from, ?to_Ctx, ?to),
    ?from_Ctx_Var = [?from_Ctx, ?from],
    ?to_Ctx_Var = [?to_Ctx, ?to].
    
    MSB(sr3,maxNum,num),
    MB(r3,maxNum,num) :- 
        MB(r1,maxNum,num1),num1<maxNum,num=num1+1,SmallVFlow(b,c),r1=[r2,b],r3=[r1,c],  //要保证MB和MSB有相同的长度
        MSB(sr1,maxNum,num1),SSmallVFlow(b,c,sb,sc),sr1=[sr2,sb],sr3=[sr1,sc].          //要保证MB和MSB最后两个元素是相同的,Var的部分
    
    SB(r):-
          MSB(r, _, _).
    B(r):-
          MB(r, _, _).

    SC(sr31),
    C(r31) :- MB(r11,maxNum,num),r11=[r21,b],SinkValue(b,c),r31=[r11,c],
              MSB(sr11,maxNum,num),sr11=[sr21,sb],SSinkValue(b,c,sb,sc),sr31=[sr11,sc].

    
    MSB([[nil, ?var1], ?var2], 10, 2),
    MB([[nil, ?a], ?b], 10, 2) :-  //定义这条链路的前两个元素
        SourceValue(?a, ?b),
        ?a = [?ctx1, ?var1],
        ?b = [?ctx2, ?var2].

}
