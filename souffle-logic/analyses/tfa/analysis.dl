// Context-sensitive pointer analysis with context of 2 object and a
// context-sensitive heap abstraction.

#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"



// For this analysis the context of a method call corresponds to the
// identity of the receiver object and the receiver object of the caller.
// Again, this may trigger creation of a new object.
.comp TwoObjectSensitivePlusHeapConfiguration_TFA : AbstractConfiguration {

  // In this analysis, the real context is a pair of Values and the real
  // heap context a single Value.

  .type Context  = [ value1:Value, value2:Value ]
  .type HContext = [ value:Value ]

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),    //这里的value是Heap
    ?hctx = [?hctxValue],
    ?calleeCtx = [?hctxValue, ?value],
    ?tomethod = ?tomethod.

  StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
    StaticContextRequest(?callerCtx, ?invo),
    ?calleeCtx = ?callerCtx.

  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-  //这里的value是heap
    RecordContextRequest(?ctx, ?value, ?var),      
    ?ctx = [?ctxValue1, ?ctxValue2],
    ?hctx = [?ctxValue2],
    ?ctxValue1 = ?ctxValue1.

  InitContextResponse(?value, ?ctx) :-
    InitContextRequest(?value),
    ?ctx = [?value, ?value].

  InitHContextResponse(?value, ?hctx) :-
    InitHContextRequest(?value),
    ?hctx = [?value].

    .init mFlow = Flow
}


